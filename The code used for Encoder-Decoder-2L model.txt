from __future__ import print_function

import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, LSTM, Dense, TimeDistributed, Dropout, Masking
import numpy as np

batch_size = 64  # Batch size for training.
epochs = 100  # Number of epochs to train for.
latent_dim = 256  # Latent dimensionality of the encoding space.
num_samples = 40000  # Number of samples to train on.
# Path to the data txt file on disk.
data_path = 'file_path'
# data_path = '/content/drive/MyDrive/DSetMin/AliOsm-Dataset-Diacritizing/UnDiac_Diac_AliOsm_Dataset.txt'
dropout_rate  = 0.2   # Rate of the dropout layers
vec_len       = 300   # Length of the vector that we will get from the embedding layer

# Vectorize the data.
input_texts = []
target_texts = []
input_characters = set()
target_characters = set()
with open(data_path, 'r', encoding='utf-8') as f:
    lines = f.read().split('\n')
for line in lines[: min(num_samples, len(lines) - 1)]:
    input_text, target_text = line.split('\t')

    input_text = input_text.replace('\ufeff', '')
    input_text = input_text.replace ('/[^أ-يA-Za-z !@#$%^&*()]/ui','')
    target_text = target_text.replace ('/[^أ-يA-Za-z !@#$%^&*()]/ui','')
    target_text = '\t' + target_text + '\n'
    if len(input_text) > 100: 
        continue              

    input_texts.append(input_text)
    target_texts.append(target_text)
    for char in input_text:
        if char not in input_characters:
            input_characters.add(char)
    for char in target_text:
        if char not in target_characters:
            target_characters.add(char)

input_characters = sorted(list(input_characters))
target_characters = sorted(list(target_characters))
num_encoder_tokens = len(input_characters)
num_decoder_tokens = len(target_characters)
max_encoder_seq_length = max([len(txt) for txt in input_texts])
max_decoder_seq_length = max([len(txt) for txt in target_texts])

print('Number of samples:', len(input_texts))
print('Number of unique input tokens:', num_encoder_tokens)
print('Number of unique output tokens:', num_decoder_tokens)
print('Max sequence length for inputs:', max_encoder_seq_length)
print('Max sequence length for outputs:', max_decoder_seq_length)
print('input_text[:5]', input_text[:5])
print('target_text[:5]', target_text[:5])

input_token_index = dict(
    [(char, i) for i, char in enumerate(input_characters)])
target_token_index = dict(
    [(char, i) for i, char in enumerate(target_characters)])

print("input_token_index", input_token_index)
print("target_token_index", target_token_index)

encoder_input_data = np.zeros(
    (len(input_texts), max_encoder_seq_length, num_encoder_tokens),
    dtype='float32')
decoder_input_data = np.zeros(
    (len(input_texts), max_decoder_seq_length, num_decoder_tokens),
    dtype='float32')
decoder_target_data = np.zeros(
    (len(input_texts), max_decoder_seq_length, num_decoder_tokens),
    dtype='float32')

for i, (input_text, target_text) in enumerate(zip(input_texts, target_texts)):
    for t, char in enumerate(input_text):
        encoder_input_data[i, t, input_token_index[char]] = 1.
    for t, char in enumerate(target_text):
        # decoder_target_data is ahead of decoder_input_data by one timestep
        decoder_input_data[i, t, target_token_index[char]] = 1.
        if t > 0:
            # decoder_target_data will be ahead by one timestep
            # and will not include the start character.
            decoder_target_data[i, t - 1, target_token_index[char]] = 1.

# Define an input sequence and process it.
encoder_inputs = Input(shape=(None, num_encoder_tokens))

encoder_dropout = Masking(mask_value = 0.0)(encoder_inputs)
encoder_LSTM1, eh1, ec1 = LSTM(latent_dim, return_sequences=True, return_state=True, name='Encoder_Lstm_1')(encoder_dropout)
# Output layer of the encoder :
encoder_LSTM_layer2 = LSTM(latent_dim, return_state=True, name='Encoder_Lstm_2')
encoder_outputs, eh2, ec2 = encoder_LSTM_layer2(encoder_LSTM1)

# We discard `encoder_outputs` and only keep the states.
encoder_states = [eh1, ec1, eh2, ec2]

# Set up the decoder, using `encoder_states` as initial state.
decoder_inputs = Input(shape=(None, num_decoder_tokens))

decoder_LSTM_layer1 = LSTM(latent_dim, return_sequences=True, return_state=True, name='Decoder_Lstm_1')
decoder_LSTM1, dh1, dc1 = decoder_LSTM_layer1(decoder_inputs, initial_state = [eh1, ec1])

decoder_LSTM_layer2 = LSTM(latent_dim, return_sequences=True, return_state=True, name='Decoder_Lstm_2')
decoder_outputs, dh2, dc2 = decoder_LSTM_layer2(decoder_LSTM1, initial_state = [eh2, ec2])

decoder_dense = Dense(num_decoder_tokens, activation='softmax')
decoder_outputs = decoder_dense(decoder_outputs)

model = Model([encoder_inputs, decoder_inputs], decoder_outputs)

model.summary()
tf.keras.utils.plot_model(                       
     model,
    to_file="my_model.png",
    show_shapes=True,
    show_layer_names=True,
    rankdir="TB",
    expand_nested=False,
    dpi=96)
model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['acc'])

checkpoint_path = "training/cp.ckpt"

callbacks_list = [
  
    tf.keras.callbacks.EarlyStopping(
        monitor='val_acc',
        patience=5), # @ old 25
    tf.keras.callbacks.ModelCheckpoint(
        checkpoint_path,
        save_weights_only=True,
        save_best_only=True,
        monitor='val_acc')]
history=model.fit([encoder_input_data, decoder_input_data], decoder_target_data,
          batch_size=batch_size,
          epochs=epochs,
          validation_split= 0.149,   # Old ==>0.1, #old 0.148
          callbacks=callbacks_list)

model.load_weights(checkpoint_path)

# Next: inference mode (sampling).
# Here's the drill:
# 1) encode input and retrieve initial decoder state
# 2) run one step of decoder with this initial state
# and a "start of sequence" token as target.
# Output will be the next target token
# 3) Repeat with the current target token and current states

# Define sampling models
encoder_model = Model(encoder_inputs, encoder_states)

decoder_state_input_h = Input(shape=(latent_dim,))
decoder_state_input_c = Input(shape=(latent_dim,))
decoder_state_input_h1 = Input(shape=(latent_dim,))
decoder_state_input_c1 = Input(shape=(latent_dim,))
decoder_states_inputs = [decoder_state_input_h, decoder_state_input_c,
                         decoder_state_input_h1, decoder_state_input_c1]

decoder_LSTM_1, dh1, dc1 = decoder_LSTM_layer1(decoder_inputs, initial_state=decoder_states_inputs[0:2])
decoder_outputs, dh2, dc2 = decoder_LSTM_layer2(decoder_LSTM_1, initial_state=decoder_states_inputs[2:4])

# Old
# decoder_outputs, state_h, state_c = decoder_lstm(
#     decoder_inputs, initial_state=decoder_states_inputs)
decoder_states = [dh1, dc1, dh2, dc2]
decoder_outputs = decoder_dense(decoder_outputs)
decoder_model = Model(
    [decoder_inputs] + decoder_states_inputs,
    [decoder_outputs] + decoder_states)

# Reverse-lookup token index to decode sequences back to
# something readable.
reverse_input_char_index = dict(
    (i, char) for char, i in input_token_index.items())
reverse_target_char_index = dict(
    (i, char) for char, i in target_token_index.items())

def decode_sequence(input_seq):
    # Encode the input as state vectors.
    states_value = encoder_model.predict(input_seq)

    # Generate empty target sequence of length 1.
    target_seq = np.zeros((1, 1, num_decoder_tokens))
    # Populate the first character of target sequence with the start character.
    target_seq[0, 0, target_token_index['\t']] = 1.

    # Sampling loop for a batch of sequences
    # (to simplify, here we assume a batch of size 1).
    stop_condition = False
    decoded_sentence = ''
    while not stop_condition:
        output_tokens, h1, c1, h2, c2 = decoder_model.predict(
            [target_seq] + states_value)

        # Sample a token
        sampled_token_index = np.argmax(output_tokens[0, -1, :])
        sampled_char = reverse_target_char_index[sampled_token_index]
        decoded_sentence += sampled_char

        # Exit condition: either hit max length
        # or find stop character.
        if (sampled_char == '\n' or
           len(decoded_sentence) > max_decoder_seq_length):
            stop_condition = True

        # Update the target sequence (of length 1).
        target_seq = np.zeros((1, 1, num_decoder_tokens))
        target_seq[0, 0, sampled_token_index] = 1.

        # Update states
        states_value = [h1, c1, h2, c2]

    return decoded_sentence

validation_split = 0.149
x = (len(input_texts)) * (1- validation_split)
x = int(x)
y = len(input_texts)

f = open('Hyp_enc_dec_2L.txt', 'w', encoding='utf-8')

for seq_index in range(x,y):
    # Take one sequence (part of the validation set)
    # for trying out decoding.
    input_seq = encoder_input_data[seq_index: seq_index + 1]
    decoded_sentence = decode_sequence(input_seq)
    f.write(decoded_sentence + '.')
   
f.close()

!pip install --upgrade bleu
!pip install --upgrade git+git://github.com/zhijing-jin/bleu.git

from bleu import file_bleu
ref_files = 'Ref_enc_dec_2L.txt'
hyp_file = 'Hyp_enc_dec_2L.txt'
file_bleu(ref_files, hyp_file)
